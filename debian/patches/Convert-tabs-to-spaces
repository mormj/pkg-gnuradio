From d56f5f4285e4313b012fb03549289144bb424493 Mon Sep 17 00:00:00 2001
From: Clayton Smith <argilo@gmail.com>
Date: Fri, 16 Sep 2016 12:00:16 -0600
Subject: [PATCH 16/27] Convert tabs to spaces.

---
 gr-vocoder/include/gnuradio/vocoder/freedv_api.h | 12 +++----
 gr-vocoder/lib/freedv_rx_ss_impl.cc              | 40 ++++++++++++------------
 gr-vocoder/lib/freedv_rx_ss_impl.h               |  6 ++--
 gr-vocoder/lib/freedv_tx_ss_impl.cc              | 16 +++++-----
 gr-vocoder/lib/freedv_tx_ss_impl.h               |  4 +--
 5 files changed, 39 insertions(+), 39 deletions(-)

diff --git a/gr-vocoder/include/gnuradio/vocoder/freedv_api.h b/gr-vocoder/include/gnuradio/vocoder/freedv_api.h
index 52fbc63492..230da4e108 100644
--- a/gr-vocoder/include/gnuradio/vocoder/freedv_api.h
+++ b/gr-vocoder/include/gnuradio/vocoder/freedv_api.h
@@ -39,22 +39,22 @@ namespace gr {
 
       enum freedv_modes {
 #ifdef FREEDV_MODE_1600
-	MODE_1600 = FREEDV_MODE_1600,
+        MODE_1600 = FREEDV_MODE_1600,
 #endif
 #ifdef FREEDV_MODE_700
-	MODE_700 = FREEDV_MODE_700,
+        MODE_700 = FREEDV_MODE_700,
 #endif
 #ifdef FREEDV_MODE_700B
-	MODE_700B = FREEDV_MODE_700B,
+        MODE_700B = FREEDV_MODE_700B,
 #endif
 #ifdef FREEDV_MODE_2400A
-	MODE_2400A = FREEDV_MODE_2400A,
+        MODE_2400A = FREEDV_MODE_2400A,
 #endif
 #ifdef FREEDV_MODE_2400B
-	MODE_2400B = FREEDV_MODE_2400B,
+        MODE_2400B = FREEDV_MODE_2400B,
 #endif
 #ifdef FREEDV_MODE_800XA
-	MODE_800XA = FREEDV_MODE_800XA,
+        MODE_800XA = FREEDV_MODE_800XA,
 #endif
       };
 
diff --git a/gr-vocoder/lib/freedv_rx_ss_impl.cc b/gr-vocoder/lib/freedv_rx_ss_impl.cc
index 6cb52effa2..06a896733d 100644
--- a/gr-vocoder/lib/freedv_rx_ss_impl.cc
+++ b/gr-vocoder/lib/freedv_rx_ss_impl.cc
@@ -50,17 +50,17 @@ namespace gr {
     freedv_rx_ss::make(int mode, float squelch_thresh)
     {
       return gnuradio::get_initial_sptr
-	(new freedv_rx_ss_impl(mode, squelch_thresh));
+        (new freedv_rx_ss_impl(mode, squelch_thresh));
     }
 
     freedv_rx_ss_impl::freedv_rx_ss_impl (int mode, float squelch_thresh)
       : gr::block("vocoder_freedv_rx_ss",
-	      io_signature::make(1, 1, sizeof(short)),
-	      io_signature::make(1, 1, sizeof(short))),
-	d_mode(mode), d_squelch_thresh(squelch_thresh)
+              io_signature::make(1, 1, sizeof(short)),
+              io_signature::make(1, 1, sizeof(short))),
+        d_mode(mode), d_squelch_thresh(squelch_thresh)
     {
       if((d_freedv = freedv_open(mode)) == NULL)
-	throw std::runtime_error("freedv_rx_ss_impl: freedv_open failed");
+        throw std::runtime_error("freedv_rx_ss_impl: freedv_open failed");
       freedv_set_snr_squelch_thresh(d_freedv, d_squelch_thresh);
       freedv_set_squelch_en(d_freedv, 0);
       freedv_set_callback_txt(d_freedv, put_next_rx_char, NULL, (void *) &d_cb_state);
@@ -85,18 +85,18 @@ namespace gr {
 
     void
     freedv_rx_ss_impl::forecast(int noutput_items,
-				gr_vector_int &ninput_items_required)
+                                gr_vector_int &ninput_items_required)
     {
       unsigned ninputs = ninput_items_required.size();
       for(unsigned i = 0; i < ninputs; i++)
-	ninput_items_required[i] = noutput_items;
+        ninput_items_required[i] = noutput_items;
     }
 
     int
     freedv_rx_ss_impl::general_work(int noutput_items,
-				    gr_vector_int &ninput_items,
-				    gr_vector_const_void_star &input_items,
-				    gr_vector_void_star &output_items)
+                                    gr_vector_int &ninput_items,
+                                    gr_vector_const_void_star &input_items,
+                                    gr_vector_void_star &output_items)
     {
       short *in = (short *) input_items[0];
       short *out = (short *) output_items[0];
@@ -104,20 +104,20 @@ namespace gr {
 
       d_nin = freedv_nin(d_freedv);
       if (ninput_items[0] < d_nin) {
-	consume_each(0);
-	return(0);
+        consume_each(0);
+        return(0);
       }
       for (i=0,n=0; ((n+d_nin) <= noutput_items)&&(i <= ninput_items[0]);) {
-	d_nout = freedv_rx(d_freedv, out, in);
-	i += d_nin;
-	n += d_nout;
-	out = &(out[d_nout]);
-	in = &(in[d_nin]);
-	d_nin = freedv_nin(d_freedv);
+        d_nout = freedv_rx(d_freedv, out, in);
+        i += d_nin;
+        n += d_nout;
+        out = &(out[d_nout]);
+        in = &(in[d_nin]);
+        d_nin = freedv_nin(d_freedv);
       }
       if ((i > ninput_items[0])||((n+d_nin) > noutput_items)) {
-	i -= d_nin;
-	n -= d_nout;
+        i -= d_nin;
+        n -= d_nout;
       } // back up to where we left off processing freedv_rx
 
       freedv_get_modem_stats(d_freedv, &d_sync, &d_snr_est);
diff --git a/gr-vocoder/lib/freedv_rx_ss_impl.h b/gr-vocoder/lib/freedv_rx_ss_impl.h
index 911355b038..acc49d9d82 100644
--- a/gr-vocoder/lib/freedv_rx_ss_impl.h
+++ b/gr-vocoder/lib/freedv_rx_ss_impl.h
@@ -70,9 +70,9 @@ namespace gr {
       void forecast(int noutput_items, gr_vector_int &ninput_items_required);
 
       int general_work(int noutput_items,
-		       gr_vector_int &ninput_items,
-		       gr_vector_const_void_star &input_items,
-		       gr_vector_void_star &output_items);
+                       gr_vector_int &ninput_items,
+                       gr_vector_const_void_star &input_items,
+                       gr_vector_void_star &output_items);
     };
 
   } /* namespace vocoder */
diff --git a/gr-vocoder/lib/freedv_tx_ss_impl.cc b/gr-vocoder/lib/freedv_tx_ss_impl.cc
index d8cf04df43..a375510050 100644
--- a/gr-vocoder/lib/freedv_tx_ss_impl.cc
+++ b/gr-vocoder/lib/freedv_tx_ss_impl.cc
@@ -57,17 +57,17 @@ namespace gr {
     freedv_tx_ss::make(int mode, const std::string msg_txt)
     {
       return gnuradio::get_initial_sptr
-	(new freedv_tx_ss_impl(mode, msg_txt));
+        (new freedv_tx_ss_impl(mode, msg_txt));
     }
 
     freedv_tx_ss_impl::freedv_tx_ss_impl(int mode, const std::string msg_txt)
       : sync_block("vocoder_freedv_tx_ss",
-		   io_signature::make(1, 1, sizeof(short)),
-		   io_signature::make(1, 1, sizeof(short))),
-	d_mode(mode), d_msg_text(msg_txt)
+                   io_signature::make(1, 1, sizeof(short)),
+                   io_signature::make(1, 1, sizeof(short))),
+        d_mode(mode), d_msg_text(msg_txt)
     {
       if((d_freedv = freedv_open(mode)) == NULL)
-	throw std::runtime_error("freedv_tx_ss_impl: freedv_open failed");
+        throw std::runtime_error("freedv_tx_ss_impl: freedv_open failed");
       snprintf(d_cb_state.tx_str,79,"%s",d_msg_text.c_str());
       d_cb_state.ptx_str = d_cb_state.tx_str;
       freedv_set_callback_txt(d_freedv, NULL, get_next_tx_char, (void *) &d_cb_state);
@@ -82,15 +82,15 @@ namespace gr {
 
     int
     freedv_tx_ss_impl::work(int noutput_items,
-			    gr_vector_const_void_star &input_items,
-			    gr_vector_void_star &output_items)
+                            gr_vector_const_void_star &input_items,
+                            gr_vector_void_star &output_items)
     {
       short *in = (short*)input_items[0];
       short *out = (short*)output_items[0];
       int i;
 
       for(i=0;i<(noutput_items/d_nom_modem_samples);i++)
-	freedv_tx(d_freedv, &(out[i*d_nom_modem_samples]), &(in[i*d_nom_modem_samples]));
+        freedv_tx(d_freedv, &(out[i*d_nom_modem_samples]), &(in[i*d_nom_modem_samples]));
       return noutput_items;
     }
 
diff --git a/gr-vocoder/lib/freedv_tx_ss_impl.h b/gr-vocoder/lib/freedv_tx_ss_impl.h
index 4a24d3b281..a023b67f5b 100644
--- a/gr-vocoder/lib/freedv_tx_ss_impl.h
+++ b/gr-vocoder/lib/freedv_tx_ss_impl.h
@@ -62,8 +62,8 @@ namespace gr {
 
       // Where all the action really happens
       int work(int noutput_items,
-	       gr_vector_const_void_star &input_items,
-	       gr_vector_void_star &output_items);
+               gr_vector_const_void_star &input_items,
+               gr_vector_void_star &output_items);
     };
 
   } /* namespace vocoder */
-- 
2.11.0

